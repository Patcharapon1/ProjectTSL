
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, filedialog, Frame, StringVar
from tkinter import *
import cv2
from PIL import ImageFont,Image, ImageTk, ImageDraw  # เพิ่มการใช้ Pillow
import random
import mediapipe as mp
import numpy as np
import pygame
from tensorflow.keras.models import load_model

OUTPUT_PATH = Path(__file__).parent
# ปรับให้เป็น path ที่ถูกต้อง
ASSETS_PATH = OUTPUT_PATH / \
    Path(r"C:/Users/User/Desktop/Project/ProjectTSL-main/ProjectTSL-main/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def exit_program():
    # โค้ดในการออกจากโปรแกรม
    print("โปรแกรมจะปิดแล้ว")
    exit()


class App(Tk):
    def __init__(self, *args, **kwargs):
        Tk.__init__(self, *args, **kwargs)

        # ตั้งขนาดหน้าจอเป็น 1920x1080 และเปิดโหมดเต็มหน้าจอ
        self.geometry("1920x1080")
        self.title("Application")

        # เปิดโหมดเต็มหน้าจอ
        self.attributes("-fullscreen", True)  # เปิด full-screen
        pygame.mixer.init()
        self.play_bgm()
        

        # หรือหากคุณต้องการให้มันปรับขนาดอัตโนมัติให้เป็น 1920x1080
        # self.attributes("-fullscreen", True)
        self.caterogy_data = {
            "วัน": ["วัน", "วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์", "เมื่อวาน", "พรุ่งนี้"],
            "เวลา": ["เวลา", "เช้า", "กลางวัน", "บ่าย", "เย็น", "ค่ำ", "กลางคืน", "เที่ยงคืน", "24ชั่วโมง", "ตลอดทั้งวัน"],
            "เลข": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
            "บุคคล": ["บุคคล", "ฉัน", "คุณ", "เขา", "พวกเรา", "ผู้หญิง", "ผู้ชาย", "เด็ก", "ผู้ใหญ่", "คนแก่"],
            "สี": ["ส้ม", "แดง", "เหลือง", "ฟ้า", "น้ำเงิน", "เขียว", "ขาว", "ดำ", "ทอง", "เทา"]
        }

        # สร้าง container
        container = Frame(self)
        container.pack(side="top", fill="both", expand=True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        # สร้าง dictionary เก็บ Frame
        self.frames = {}
        self.watched_videos = {}  # เก็บสถานะวิดีโอที่ดูในแต่ละหมวดหมู่

        for F in (StartPage, LearningPage, LearningPageVideo,ChallengeSelectPage,ChallengePage):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        # เริ่มต้นที่หน้า StartPage
        self.show_frame("StartPage")
        

    # ฟังก์ชันสำหรับแสดงหน้า
    def show_frame(self, page_name, button_name=None):
        
        # เรียกฟังก์ชัน on_hide สำหรับหน้าที่กำลังจะถูกซ่อน
        for page in self.frames.values():
            if hasattr(page, "on_hide"):
                page.on_hide()  # เรียก on_hide เพื่อหยุดการทำงาน เช่น ตัวจับเวลา
                
        frame = self.frames[page_name]
        frame.tkraise()
        
        # หากหน้าที่แสดงมีฟังก์ชัน on_show เรียกใช้ฟังก์ชันนั้น
        if hasattr(frame, "on_show"):
            frame.on_show()
        # ถ้าเป็นหน้า LearningPageVideo, ส่งข้อมูล button_name ไป
        if page_name == "LearningPageVideo" and button_name:
            frame.load_video_data(button_name)  # ส่งข้อมูลไปที่ LearningPageVideo
        elif page_name == "ChallengePage" and button_name:
            frame.update_content(button_name)

    def play_bgm(self):
        """ฟังก์ชันสำหรับเล่นเสียง BGM"""
        pygame.mixer.music.load("assets/frame0/Sound/BGM1.mp3")  # ใส่ path ของไฟล์เสียง BGM ที่ต้องการเล่น
        pygame.mixer.music.play(loops=-1, start=0.0)  # เล่น BGM ซ้ำไปเรื่อยๆ
        self.set_bgm_volume()
    def stop_bgm(self):
        """ฟังก์ชันหยุดเสียง BGM"""
        pygame.mixer.music.stop()

    def set_bgm_volume(self):
        """ฟังก์ชันตั้งระดับเสียง BGM"""
        # volume ค่าที่รับจะต้องเป็นค่าระหว่าง 0.0 ถึง 1.0
        pygame.mixer.music.set_volume(0.03)  # ปรับระดับเสียง BGM
        
    def play_sound(self, sound_file):
        """ฟังก์ชันสำหรับเล่นเสียง"""
        pygame.mixer.music.load(sound_file)
        pygame.mixer.music.set_volume(0.05)
        pygame.mixer.music.play()

    def correct_answer(self):
        """เล่นเสียงตอบถูก"""
        self.play_sound("assets/frame0/Sound/Good.mp3")

    def time_up(self):
        """เล่นเสียงหมดเวลา"""
        self.play_sound("assets/frame0/Sound/Sad.mp3")

    def button_click(self):
        """เล่นเสียงคลิกปุ่ม"""
        self.play_sound("assets/frame0/Sound/Click.mp3")
            
    def mark_video_as_watched(self, video_name):
        """บันทึกวิดีโอที่ดูแล้ว"""
        # ค้นหาหมวดหมู่ของวิดีโอจาก caterogy_data
        category = None
        for cat, video_list in self.caterogy_data.items():
            if video_name in video_list:
                category = cat
                break

        if not category:
            print(f"ไม่พบวิดีโอ {video_name} ในข้อมูลหมวดหมู่")
            return
            
        # บันทึกวิดีโอที่ดูแล้วในหมวดหมู่ที่ตรงกัน
        if category not in self.watched_videos:
            self.watched_videos[category] = set()
        
        if video_name not in self.watched_videos[category]:
            self.watched_videos[category].add(video_name)
            print(f"บันทึกวิดีโอ '{video_name}' ในหมวดหมู่ '{category}'")
            self.update_start_page_circles(category)
            
    def update_start_page_circles(self, category):
        """อัปเดตสีวงกลมใน StartPage"""
        watched_count = len(self.watched_videos.get(category, []))
        print(watched_count)
        start_page = self.frames["StartPage"]

        if watched_count == 10:
            color = "#00FF00"  # สีเขียว
        elif watched_count > 0:
            color = "#FFFF00"  # สีเหลือง
        else:
            color = "#FF0000"  # สีแดง (เริ่มต้น)
        print(category)
        print(color)
        
        start_page.update_progress_bar(category,watched_count)
        start_page.update_circle_color(category, color)
            
    def update_start_page_score(self,caterogy_name, best_score_word_list1, best_score_word_list2):
        """อัปเดตคะแนนรวมของทั้งสอง wordlist และแสดงบน StartPage"""
        total_score = best_score_word_list1 + best_score_word_list2
        print(f"คะแนนรวม (wordlist1 + wordlist2): {total_score}")
        start_page = self.frames["StartPage"]
        start_page.update_category_score(caterogy_name,total_score)
        


class StartPage(Frame):
    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        

        self.canvas = Canvas(self, bg="#FFFFFF", height=1080, width=1920,
                             bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        self.image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
        self.canvas.create_image(1096.0, 665.0, image=self.image_1)

        self.canvas.create_rectangle(0.0, 110.0, 279.0, 1080.0,
                                     fill="#FFE0D0", outline="")

############################################################### EXIT ###############################################################
        self.button_image_exit = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_exit = Button(self, image=self.button_image_exit, borderwidth=0, highlightthickness=0,
                             bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit.place(x=126.0, y=1007.0, width=118.0, height=37.0)

        self.button_image_exit2 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        button_exit2 = Button(self, image=self.button_image_exit2, borderwidth=0, highlightthickness=0,
                              bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit2.place(x=33.0, y=1005.0, width=60.0, height=60.0)
####################################################################################################################################
############################################################### Sound ###############################################################
#        self.button_image_Sound = PhotoImage(
#            file=relative_to_assets("button_6.png"))
#        button_Sound = Button(self, image=self.button_image_Sound, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
#                              activebackground="#FFE0D0", command=lambda: print("button_Sound clicked"), relief="flat")
#        button_Sound.place(x=34.0, y=415.0, width=60.0, height=60.0)
#
#        self.button_image_Sound2 = PhotoImage(
#            file=relative_to_assets("button_1.png"))
#        button_Sound2 = Button(self, image=self.button_image_Sound2, borderwidth=0, highlightthickness=0,
#                               bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: print("button_Sound2 clicked"), relief="flat")
#        button_Sound2.place(x=129.0, y=432.0, width=118.0, height=24.0)
#########################################################################################################################################
############################################################### Challenge ###############################################################
        self.button_image_Challenge = PhotoImage(
            file=relative_to_assets("button_10.png"))
        button_Challenge = Button(self, image=self.button_image_Challenge, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                  relief="flat")
        button_Challenge.place(x=34.0, y=325.0, width=60.0, height=60.0)

        self.button_image_Challenge2 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_Challenge2 = Button(self, image=self.button_image_Challenge2, borderwidth=0, highlightthickness=0,
                                   bg="#FFE0D0", activebackground="#FFE0D0",
                                   command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                   relief="flat")
        button_Challenge2.place(x=129.0, y=328.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Learning ###############################################################
        self.button_image_Learning = PhotoImage(
            file=relative_to_assets("button_9.png"))
        button_Learning = Button(self, image=self.button_image_Learning, borderwidth=0, highlightthickness=0,
                                 bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: controller.show_frame("LearningPage"), relief="flat")
        button_Learning.place(x=34.0, y=235.0, width=60.0, height=60.0)

        self.button_image_Learning2 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_Learning2 = Button(self, image=self.button_image_Learning2, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: controller.show_frame("LearningPage"), relief="flat")
        button_Learning2.place(x=129.0, y=242.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Home ###############################################################
        self.button_image_Home = PhotoImage(
            file=relative_to_assets("button_12.png"))
        button_Home = Button(self, image=self.button_image_Home, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                             activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home.place(x=34.0, y=150.0, width=60.0, height=60.0)

        self.button_image_Home2 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_Home2 = Button(self, image=self.button_image_Home2, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                              activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home2.place(x=129.0, y=156.0, width=118.0, height=37.0)
###################################################################################################################################

        self.image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
        self.canvas.create_image(950.0, 60.0, image=self.image_image_2)
        self.image_image_home = PhotoImage(file=relative_to_assets("image_9.png"))
        self.canvas.create_image(1050.0, 275.0, image=self.image_image_home)


################################################################ Toggle Button###############################################################

        self.button_image_Toggle = PhotoImage(
            file=relative_to_assets("button_7.png"))
        button_Toggle = Button(self, image=self.button_image_Toggle, borderwidth=0, highlightthickness=0,
                               bg="#ffbcbc", activebackground="#ffbcbc", command=lambda: print("button_Toggle clicked"), relief="flat")
        button_Toggle.place(x=23.0, y=18.0, width=72.0, height=72.0)

        # สร้าง Entry
        self.entry_image_1 = PhotoImage(file=relative_to_assets("entry_1.png"))
        self.canvas.create_image(300.5, 54.5, image=self.entry_image_1)

###################################################################################################################################
        # การสร้างข้อความ
        self.canvas.create_text(
            470.0, 379.0, anchor="nw", text="บทเรียน", fill="#000000", font=("Inter", 32)
        )
        self.canvas.create_text(
            470.0, 671.0, anchor="nw", text="ท้าทาย", fill="#000000", font=("Inter", 32)
        )
        self.canvas.create_text(
            539.0, 435.0, anchor="nw", text="บุคคล", fill="#000000", font=("Inter", 32 * -1)
        )
        self.canvas.create_text(
            539.0, 480.0, anchor="nw", text="สี", fill="#000000", font=("Inter", 32 * -1)
        )
        self.canvas.create_text(
            539.0, 525.0, anchor="nw", text="เลข", fill="#000000", font=("Inter", 32 * -1)
        )
        self.canvas.create_text(
            539.0, 570.0, anchor="nw", text="วัน", fill="#000000", font=("Inter", 32 * -1)
        )
        self.canvas.create_text(
            539.0, 615.0, anchor="nw", text="เวลา", fill="#000000", font=("Inter", 32 * -1)
        )
        self.canvas.create_text(
            537.0, 727.0, anchor="nw", text="บุคคล", fill="#000000", font=("Inter", 32 * -1)
        )
        self.score_text_person = self.canvas.create_text(
            1754.0, 727.0, anchor="nw", text="0/10", fill="#000000", font=("Inter", 30 * -1)
        )
        self.score_text_color = self.canvas.create_text(
            1753.0, 772.0, anchor="nw", text="0/10", fill="#000000", font=("Inter", 30 * -1)
        )
        self.score_text_number = self.canvas.create_text(
            1754.0, 817.0, anchor="nw", text="0/10", fill="#000000", font=("Inter", 30 * -1)
        )

        self.score_text_day = self.canvas.create_text(
            1754.0, 862.0, anchor="nw", text="0/10", fill="#000000", font=("Inter", 30 * -1))

        self.score_text_time = self.canvas.create_text(
            1753.0, 907.0, anchor="nw", text="0/10", fill="#000000", font=("Inter", 30 * -1))

        self.canvas.create_text(
            537.0, 772.0, anchor="nw", text="สี", fill="#000000", font=("Inter", 32 * -1))

        self.canvas.create_text(
            537.0, 817.0, anchor="nw", text="เลข", fill="#000000", font=("Inter", 32 * -1))

        self.canvas.create_text(
            537.0, 862.0, anchor="nw", text="วัน", fill="#000000", font=("Inter", 32 * -1))

        self.canvas.create_text(
            537.0, 907.0, anchor="nw", text="เวลา", fill="#000000", font=("Inter", 32 * -1))
        
        self.circle_items = {
            "บุคคล": self.canvas.create_oval(1785.0, 444.0, 1807.0, 466.0, fill="#FF0000", outline=""),
            "สี": self.canvas.create_oval(1785.0, 489.0, 1807.0, 511.0, fill="#FF0000", outline=""),
            "เลข": self.canvas.create_oval(1785.0, 534.0, 1807.0, 556.0, fill="#FF0000", outline=""),
            "วัน": self.canvas.create_oval(1785.0, 579.0, 1807.0, 601.0, fill="#FF0000", outline=""),
            "เวลา": self.canvas.create_oval(1785.0, 624.0, 1807.0, 646.0, fill="#FF0000", outline=""),
        }
        self.progress_bars = {}
        self.create_rounded_rectangle(self.canvas, 1479.0, 444.0,
                                 1773.0, 466.0, radius=10, fill="#D9D9D9", outline="")

        self.create_rounded_rectangle(self.canvas, 1479.0, 489.0,
                                 1773.0, 511.0, radius=10, fill="#D9D9D9", outline="")

        self.create_rounded_rectangle(self.canvas, 1479.0, 534.0,
                                 1773.0, 556.0, radius=10, fill="#D9D9D9", outline="")

        self.create_rounded_rectangle(self.canvas, 1479.0, 579.0,
                                 1773.0, 601.0, radius=10, fill="#D9D9D9", outline="")
        self.create_rounded_rectangle(self.canvas, 1479.0, 624.0,
                                 1773.0, 646.0, radius=10, fill="#D9D9D9", outline="")
        

    def create_rounded_rectangle(self, canvas, x1, y1, x2, y2, radius, **kwargs):
        # สร้างมุมโค้งและกรอบของสี่เหลี่ยม
        canvas.create_arc(x1, y1, x1 + 2 * radius, y1 + 2 * radius, start=90, extent=90, style="pieslice", **kwargs)
        canvas.create_arc(x2 - 2 * radius, y1, x2, y1 + 2 * radius, start=0, extent=90, style="pieslice", **kwargs)
        canvas.create_arc(x2 - 2 * radius, y2 - 2 * radius, x2, y2, start=270, extent=90, style="pieslice", **kwargs)
        canvas.create_arc(x1, y2 - 2 * radius, x1 + 2 * radius, y2, start=180, extent=90, style="pieslice", **kwargs)
        canvas.create_rectangle(x1 + radius, y1, x2 - radius, y2, **kwargs)
        canvas.create_rectangle(x1, y1 + radius, x1 + radius, y2 - radius, **kwargs)
        canvas.create_rectangle(x2 - radius, y1 + radius, x2, y2 - radius, **kwargs)
            
        
    def update_progress_bar(self, category, watched_count):
        """อัปเดตโปรเกรสบาร์ตามจำนวนคลิปที่ดู"""
        max_videos = 10

        # คำนวณเปอร์เซ็นต์ที่ดูแล้ว
        percentage_watched = (watched_count / max_videos) * 100
        percentage_watched = min(percentage_watched, 100)

        # คำนวณความกว้างของสี่เหลี่ยมที่แสดง
        bar_width = (percentage_watched / 100) * (1773.0 - 1479.0)  # กว้างสุดของหลอด (294)
        y_start = 444.0 + list(self.circle_items.keys()).index(category) * 45

        # ถ้าโปรเกรสบาร์ยังไม่ถูกสร้าง ให้สร้างใหม่
        if category not in self.progress_bars:
            self.progress_bars[category] = self.create_rounded_rectangle(self.canvas, 1479.0, y_start,
                                                                         1479.0 + bar_width, y_start + 22,
                                                                         radius=10, fill="#D9D9D9", outline="")
        #else:
            # อัปเดตโปรเกรสบาร์ที่มีอยู่แล้ว
            #print(category)
            #print(bar_width)
            #print(y_start)
            #self.canvas.coords(self.progress_bars[category], 1479.0, y_start, 1479.0 + bar_width, y_start + 22)

        # วาดโปรเกรสบาร์ใหม่ (สีส้ม)
        self.create_rounded_rectangle(self.canvas, 1479.0, y_start, 1479.0 + bar_width, y_start + 22,
                                      radius=10, fill="#ff8000", outline="")




        
    def update_category_score(self, category_name, score):
        """อัปเดตคะแนนในหมวดหมู่ที่กำหนด"""
        if category_name == "บุคคล":
            self.canvas.itemconfig(self.score_text_person, text=f"{score}/10")
        elif category_name == "สี":
            self.canvas.itemconfig(self.score_text_color, text=f"{score}/10")
        elif category_name == "เลข":
            self.canvas.itemconfig(self.score_text_number, text=f"{score}/10")
        elif category_name == "วัน":
            self.canvas.itemconfig(self.score_text_day, text=f"{score}/10")
        elif category_name == "เวลา":
            self.canvas.itemconfig(self.score_text_time, text=f"{score}/10")
    def update_circle_color(self, category, color):
        """เปลี่ยนสีของวงกลมสำหรับหมวดหมู่ที่ระบุ"""
        print("start")
        print(color)
        print(category)
        if category in self.circle_items:
            self.canvas.itemconfig(self.circle_items[category], fill=color)
            


class LearningPage(Frame):
    def __init__(self, parent, controller):
        Frame.__init__(self, parent)

        self.controller = controller

        self.canvas = Canvas(self, bg="#FFFFFF", height=1080, width=1920,
                             bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        self.image_1 = PhotoImage(file=relative_to_assets("image_3.png"))
        self.canvas.create_image(1096.0, 665.0, image=self.image_1)

        self.canvas.create_rectangle(0.0, 110.0, 279.0, 1080.0,
                                     fill="#FFE0D0", outline="")

        # สร้างปุ่มเริ่มต้น
        self.create_buttons()

############################################################### EXIT ###############################################################
        self.button_image_exit = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_exit = Button(self, image=self.button_image_exit, borderwidth=0, highlightthickness=0,
                             bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit.place(x=126.0, y=1007.0, width=118.0, height=37.0)

        self.button_image_exit2 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        button_exit2 = Button(self, image=self.button_image_exit2, borderwidth=0, highlightthickness=0,
                              bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit2.place(x=33.0, y=1005.0, width=60.0, height=60.0)
####################################################################################################################################
############################################################### Sound ###############################################################
#        self.button_image_Sound = PhotoImage(
#            file=relative_to_assets("button_6.png"))
#        button_Sound = Button(self, image=self.button_image_Sound, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
#                              activebackground="#FFE0D0", command=lambda: print("button_Sound clicked"), relief="flat")
#        button_Sound.place(x=34.0, y=415.0, width=60.0, height=60.0)
#
#        self.button_image_Sound2 = PhotoImage(
#            file=relative_to_assets("button_1.png"))
#        button_Sound2 = Button(self, image=self.button_image_Sound2, borderwidth=0, highlightthickness=0,
#                               bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: print("button_Sound2 clicked"), relief="flat")
#        button_Sound2.place(x=129.0, y=432.0, width=118.0, height=24.0)
#########################################################################################################################################
############################################################### Challenge ###############################################################
        self.button_image_Challenge = PhotoImage(
            file=relative_to_assets("button_10.png"))
        button_Challenge = Button(self, image=self.button_image_Challenge, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                  relief="flat")
        button_Challenge.place(x=34.0, y=325.0, width=60.0, height=60.0)

        self.button_image_Challenge2 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_Challenge2 = Button(self, image=self.button_image_Challenge2, borderwidth=0, highlightthickness=0,
                                   bg="#FFE0D0", activebackground="#FFE0D0",
                                   command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                   relief="flat")
        button_Challenge2.place(x=129.0, y=328.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Learning ###############################################################
        self.button_image_Learning = PhotoImage(
            file=relative_to_assets("button_9.png"))
        button_Learning = Button(self, image=self.button_image_Learning, borderwidth=0, highlightthickness=0,
                                 bg="#FFE0D0", activebackground="#FFE0D0",
                                 command=lambda: [controller.show_frame(
                                     "LearningPage"), controller.frames["LearningPage"].reset_page()],
                                 relief="flat")
        button_Learning.place(x=34.0, y=235.0, width=60.0, height=60.0)

        self.button_image_Learning2 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_Learning2 = Button(self, image=self.button_image_Learning2, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame(
                                      "LearningPage"), controller.frames["LearningPage"].reset_page()],
                                  relief="flat")
        button_Learning2.place(x=129.0, y=242.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Home ###############################################################
        self.button_image_Home = PhotoImage(
            file=relative_to_assets("button_12.png"))
        button_Home = Button(self, image=self.button_image_Home, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                             activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home.place(x=34.0, y=150.0, width=60.0, height=60.0)

        self.button_image_Home2 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_Home2 = Button(self, image=self.button_image_Home2, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                              activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home2.place(x=129.0, y=156.0, width=118.0, height=37.0)
###################################################################################################################################

        self.image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
        self.canvas.create_image(950.0, 60.0, image=self.image_image_2)


################################################################ Toggle Button###############################################################

        self.button_image_Toggle = PhotoImage(
            file=relative_to_assets("button_7.png"))
        button_Toggle = Button(self, image=self.button_image_Toggle, borderwidth=0, highlightthickness=0,
                               bg="#ffbcbc", activebackground="#ffbcbc", command=lambda: print("button_Toggle clicked"), relief="flat")
        button_Toggle.place(x=23.0, y=18.0, width=72.0, height=72.0)

        # สร้าง Entry
        self.entry_image_1 = PhotoImage(file=relative_to_assets("entry_3.png"))
        self.canvas.create_image(190.5, 54.5, image=self.entry_image_1)
###################################################################################################################################
################################################################ Choice Learning ###############################################################

# สร้างข้อความ "บทเรียน"
        self.text_id = self.canvas.create_text(
            897.0,
            176.0,
            anchor="nw",
            text="บทเรียน",
            fill="#FF7F00",
            font=("Inter", 128 * -1)
        )

    def create_buttons(self):
        """ สร้างปุ่มทั้งหมดที่หน้า Learning """
        self.button_image_12 = PhotoImage(
            file=relative_to_assets("button_14.png"))
        button_12 = Button(self, image=self.button_image_12, borderwidth=0, bg="#f8dcd6", highlightthickness=0,
                           command=lambda: self.change_to_video_page("วัน"), relief="flat")
        button_12.place(x=612.0, y=379.0, width=419.0, height=124.0)

        self.button_image_13 = PhotoImage(
            file=relative_to_assets("button_15.png"))
        button_13 = Button(self, image=self.button_image_13, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_video_page("เวลา"), relief="flat")
        button_13.place(x=1173.0, y=379.0, width=419.0, height=124.0)

        self.button_image_14 = PhotoImage(
            file=relative_to_assets("button_16.png"))
        button_14 = Button(self, image=self.button_image_14, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_video_page("เลข"), relief="flat")
        button_14.place(x=1173.0, y=590.0, width=419.0, height=124.0)

        self.button_image_15 = PhotoImage(
            file=relative_to_assets("button_17.png"))
        button_15 = Button(self, image=self.button_image_15, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_video_page("บุคคล"), relief="flat")
        button_15.place(x=893.0, y=801.0, width=419.0, height=124.0)

        self.button_image_16 = PhotoImage(
            file=relative_to_assets("button_18.png"))
        button_16 = Button(self, image=self.button_image_16, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_video_page("สี"), relief="flat")
        button_16.place(x=612.0, y=590.0, width=419.0, height=124.0)

    def change_to_video_page(self, button_name):
        """ เปลี่ยนหน้าไปยัง LearningPageVideo และส่งข้อมูล """
        self.controller.show_frame("LearningPageVideo", button_name)

###################################################################################################################################


class LearningPageVideo(Frame):
    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.current_category = None 
        self.controller = controller

        self.canvas = Canvas(self, bg="#FFFFFF", height=1080, width=1920,
                             bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        self.image_1 = PhotoImage(file=relative_to_assets("image_3.png"))
        self.canvas.create_image(1096.0, 665.0, image=self.image_1)

        self.canvas.create_rectangle(0.0, 110.0, 279.0, 1080.0,
                                     fill="#FFE0D0", outline="")

        # ข้อความที่จะแสดง
        self.text_id = None

        # รูปภาพที่จะแสดง
        self.image_id = None
        self.entry_id = None

        # สี่เหลี่ยมที่จะแสดง
        self.rectangle_ids = []

        # สี่เหลี่ยมและ Dropdown ที่จะแสดง
        self.rectangle_ids = []
        self.dropdown_menu = None  # ตัวแปรเก็บวิดเจ็ต Dropdown

############################################################### EXIT ###############################################################
        self.button_image_exit = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_exit = Button(self, image=self.button_image_exit, borderwidth=0, highlightthickness=0,
                             bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit.place(x=126.0, y=1007.0, width=118.0, height=37.0)

        self.button_image_exit2 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        button_exit2 = Button(self, image=self.button_image_exit2, borderwidth=0, highlightthickness=0,
                              bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit2.place(x=33.0, y=1005.0, width=60.0, height=60.0)
####################################################################################################################################
############################################################### Sound ###############################################################
#        self.button_image_Sound = PhotoImage(
#            file=relative_to_assets("button_6.png"))
#        button_Sound = Button(self, image=self.button_image_Sound, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
#                              activebackground="#FFE0D0", command=lambda: print("button_Sound clicked"), relief="flat")
#        button_Sound.place(x=34.0, y=415.0, width=60.0, height=60.0)
#
#        self.button_image_Sound2 = PhotoImage(
#            file=relative_to_assets("button_1.png"))
#        button_Sound2 = Button(self, image=self.button_image_Sound2, borderwidth=0, highlightthickness=0,
#                               bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: print("button_Sound2 clicked"), relief="flat")
#        button_Sound2.place(x=129.0, y=432.0, width=118.0, height=24.0)
#########################################################################################################################################
############################################################### Challenge ###############################################################
        self.button_image_Challenge = PhotoImage(
            file=relative_to_assets("button_10.png"))
        button_Challenge = Button(self, image=self.button_image_Challenge, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                  relief="flat")
        button_Challenge.place(x=34.0, y=675.0, width=60.0, height=60.0)

        self.button_image_Challenge2 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_Challenge2 = Button(self, image=self.button_image_Challenge2, borderwidth=0, highlightthickness=0,
                                   bg="#FFE0D0", activebackground="#FFE0D0",
                                   command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                   relief="flat")
        button_Challenge2.place(x=129.0, y=678.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Learning ###############################################################
        self.button_image_Learning = PhotoImage(
            file=relative_to_assets("button_9.png"))
        button_Learning = Button(self, image=self.button_image_Learning, borderwidth=0, highlightthickness=0,
                                 bg="#FFE0D0", activebackground="#FFE0D0",
                                 command=lambda: [controller.show_frame(
                                     "LearningPage"), controller.frames["LearningPageVideo"].reset_page()],
                                 relief="flat")
        button_Learning.place(x=34.0, y=235.0, width=60.0, height=60.0)

        self.button_image_Learning2 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_Learning2 = Button(self, image=self.button_image_Learning2, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame(
                                      "LearningPage"), controller.frames["LearningPageVideo"].reset_page()],
                                  relief="flat")
        button_Learning2.place(x=129.0, y=242.0, width=118.0, height=37.0)
        self.image_image_choice = PhotoImage(file=relative_to_assets("image_7.png"))
        self.canvas.create_image(80.0, 463.5, image=self.image_image_choice)

###################################################################################################################################
############################################################### Home ###############################################################
        self.button_image_Home = PhotoImage(
            file=relative_to_assets("button_12.png"))
        button_Home = Button(self, image=self.button_image_Home, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                             activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home.place(x=34.0, y=150.0, width=60.0, height=60.0)

        self.button_image_Home2 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_Home2 = Button(self, image=self.button_image_Home2, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                              activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home2.place(x=129.0, y=156.0, width=118.0, height=37.0)
###################################################################################################################################

        self.image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
        self.canvas.create_image(950.0, 60.0, image=self.image_image_2)


################################################################ Toggle Button###############################################################

        self.button_image_Toggle = PhotoImage(
            file=relative_to_assets("button_7.png"))
        button_Toggle = Button(self, image=self.button_image_Toggle, borderwidth=0, highlightthickness=0,
                               bg="#ffbcbc", activebackground="#ffbcbc", command=lambda: print("button_Toggle clicked"), relief="flat")
        button_Toggle.place(x=23.0, y=18.0, width=72.0, height=72.0)

        # สร้าง Entry
        self.entry_image_1 = PhotoImage(file=relative_to_assets("entry_3.png"))
        self.canvas.create_image(190.5, 54.5, image=self.entry_image_1)

        # สร้าง Entry
        #self.entry_image_change = PhotoImage(file=relative_to_assets("entry_5.png"))
        #self.canvas.create_image(890.5, 54.5, image=self.entry_image_change)
###################################################################################################################################
################################################################ Choice Learning ###############################################################

        # ปุ่มที่มีรูป
        self.button_image_12 = PhotoImage(
            file=relative_to_assets("button_19.png"))
        button_12 = Button(self, image=self.button_image_12, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=self.move_option_forward, relief="flat")
        button_12.place(x=1600.0, y=510.0, width=155.53, height=155.53)

        # ปุ่มที่สอง
        self.button_image_13 = PhotoImage(
            file=relative_to_assets("button_20.png"))
        button_13 = Button(self, image=self.button_image_13, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=self.move_option_backward, relief="flat")
        button_13.place(x=430.0, y=510.0, width=155.53, height=155.53)

        self.default_elements = [button_12, button_13]

    def on_show(self):
        """ ฟังก์ชันนี้จะถูกเรียกเมื่อแสดงหน้า StartPage """
        self.reset_page()  # เรียกใช้การรีเซ็ตข้อมูลในหน้านี้

    #def update_second_dropdown(self, selected_category):
    #    """ ฟังก์ชันนี้จะอัพเดต Dropdown ที่สองตามค่าที่เลือกใน Dropdown แรก """
        # รีเซ็ตค่า current_index เมื่อเลือกหมวดหมู่ใหม่
    #    self.current_index = 0  # รีเซ็ตตัวเลือกใน second dropdown เป็นตัวแรก

        # ดึงตัวเลือกจาก dictionary ตามหมวดหมู่ที่เลือก
    #    options = self.dropdown_data[selected_category]

    #    self.selected_option.set(options[0])  # รีเซ็ตค่าเริ่มต้น
    #    menu = self.second_dropdown_menu["menu"]
    #    menu.delete(0, "end")  # ลบตัวเลือกเดิม
    #    for index, option in enumerate(options):
            # ปรับ lambda ให้มีการอัพเดต current_index เมื่อเลือกคำ
    #        menu.add_command(label=option, command=lambda value=option,
    #                         idx=index: self.update_selected_option(value, idx))

        # อัปเดตข้อความที่แสดงใน canvas เมื่อหมวดหมู่เปลี่ยน
    #    self.update_text(selected_category)
    #    self.load_video_by_option(options[0])

    #def update_text(self, selected_category):
    #    """ ฟังก์ชันนี้จะอัพเดตข้อความที่แสดงใน canvas ตามหมวดหมู่ที่เลือก """
    #    if hasattr(self, 'text_id') and self.text_id:
    #        self.canvas.delete(self.text_id)  # ลบข้อความเดิม

        
        # แสดงข้อความใหม่ตามหมวดหมู่ที่เลือก
    #    self.entry_id = self.canvas.create_text(565.0, 199.0, anchor="nw", text=f"บทเรียน: {selected_category}",
    #                                           fill="#FF7F00", font=("Inter", 48 * -1))

    def reset_page(self):
        """ รีเซ็ตข้อมูลหน้า """
        if hasattr(self, 'text_id') and self.text_id:
            self.canvas.delete(self.text_id)
            self.text_id = None

        if hasattr(self, 'image_id') and self.image_id:
            self.canvas.delete(self.image_id)
            self.image_id = None

        if hasattr(self, 'rectangle_ids') and self.rectangle_ids:
            for rect in self.rectangle_ids:
                self.canvas.delete(rect)
            self.rectangle_ids = []

        if hasattr(self, 'category_menu') and self.category_menu:
            self.category_menu.destroy()
            self.category_menu = None

        if hasattr(self, 'second_dropdown_menu') and self.second_dropdown_menu:
            self.second_dropdown_menu.destroy()
            self.second_dropdown_menu = None

    #def move_second_dropdown_forward(self):
    #    """ ฟังก์ชันนี้จะเลื่อนตัวเลือกใน second dropdown ไปข้างหน้า """
    #    options = self.dropdown_data[self.selected_Category.get()]
    #    self.current_index = (self.current_index + 1) % len(options)
        # อัปเดตค่าใน dropdown
    #    self.selected_option.set(options[self.current_index])
    #    self.load_video_by_option(
    #        options[self.current_index])  # โหลดวิดีโอใหม่

    #def move_second_dropdown_backward(self):
    #    """ ฟังก์ชันนี้จะเลื่อนตัวเลือกใน second dropdown ย้อนกลับ """
    #    options = self.dropdown_data[self.selected_Category.get()]
    #    self.current_index = (self.current_index - 1) % len(options)
        # อัปเดตค่าใน dropdown
    #    self.selected_option.set(options[self.current_index])
    #    self.load_video_by_option(
    #        options[self.current_index])  # โหลดวิดีโอใหม่
    def move_option_forward(self):
        """ ฟังก์ชันเลื่อนตัวเลือกไปข้างหน้า """
        options = self.dropdown_data[self.current_category]  # ดึงตัวเลือกของหมวดหมู่ปัจจุบัน
        self.current_index = (self.current_index + 1) % len(options)  # เลื่อนตำแหน่งตัวเลือกไปข้างหน้า
        self.load_video_by_option(options[self.current_index])  # อัปเดตและโหลดวิดีโอใหม่

    def move_option_backward(self):
        """ ฟังก์ชันเลื่อนตัวเลือกย้อนกลับ """
        options = self.dropdown_data[self.current_category]  # ดึงตัวเลือกของหมวดหมู่ปัจจุบัน
        self.current_index = (self.current_index - 1) % len(options)  # เลื่อนตำแหน่งตัวเลือกย้อนกลับ
        self.load_video_by_option(options[self.current_index])  # อัปเดตและโหลดวิดีโอใหม่
    

    def update_selected_option(self, word):
        """ อัปเดตค่าที่เลือกใน dropdown """
        options = self.dropdown_data[self.current_category] 
        # ตั้งชื่อวิดีโอที่ตรงกับคำที่เลือก
        if word in options:
            # หาตำแหน่ง index ของคำที่เลือก
            self.current_index = options.index(word)  # ค้นหาตำแหน่งของคำใน list
            # เรียกใช้ฟังก์ชันเพื่อโหลดวิดีโอใหม่ตามคำที่เลือก
            self.load_video_by_option(word)  # โหลดวิดีโอใหม่จากคำที่เลือก
        else:
            print(f"คำ {word} ไม่อยู่ในรายการคำที่มีในหมวด {self.current_category}")


    def update_video(self):
        """ฟังก์ชันที่ใช้เล่นวิดีโอใน Tkinter"""
        # ยกเลิกการเรียกซ้ำก่อนหน้านี้ (ถ้ามี)
        if hasattr(self, 'video_update_id'):
            self.after_cancel(self.video_update_id)

        if hasattr(self, 'video_capture') and self.video_capture.isOpened():
            ret, frame = self.video_capture.read()
            if ret:
                # แปลงภาพจาก OpenCV (BGR) เป็น RGB
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                # คำนวณขนาดใหม่ (ปรับขนาดตามต้องการ)
                scale_factor_x = 0.45  # ขยายหรือย่อ
                scale_factor_y = 0.55
                new_width = int(frame.shape[1] * scale_factor_x)
                new_height = int(frame.shape[0] * scale_factor_y)
                frame = cv2.resize(frame, (new_width, new_height))

                # แปลงเป็นรูปภาพที่ Tkinter สามารถแสดงได้
                img = Image.fromarray(frame)
                img_tk = ImageTk.PhotoImage(image=img)
                self.image_tk = img_tk  # เก็บการอ้างอิง

                # แสดงภาพใน canvas
                self.canvas.create_image(1090.0, 595.0, image=self.image_tk)

                # ตั้งเวลาการอัปเดต (เก็บ ID ของ after ไว้)
                self.video_update_id = self.after(30, self.update_video)
            else:
                # รีเซ็ตวิดีโอไปยังจุดเริ่มต้น
                self.video_capture.set(cv2.CAP_PROP_POS_FRAMES, 0)
                self.update_video()

    def release_video(self):
        """ปล่อยทรัพยากรวิดีโอ"""
        if hasattr(self, 'video_capture') and self.video_capture.isOpened():
            self.video_capture.release()

        if hasattr(self, 'video_update_id'):
            self.after_cancel(self.video_update_id)

    def load_video_by_option(self, selected_option):
        """โหลดวิดีโอใหม่ตามตัวเลือกที่เลือกจาก dropdown"""
        # ปิด video_capture ปัจจุบันก่อน
        if hasattr(self, 'video_capture') and self.video_capture.isOpened():
            self.video_capture.release()

        # โหลดวิดีโอใหม่
        video_path = f"assets/frame0/Video/{selected_option}.mp4"
        self.change_video(video_path)

    def change_video(self, new_video_path):
        """ฟังก์ชันที่ใช้เปลี่ยนวิดีโอ"""
        # ยกเลิกการอัปเดตวิดีโอที่กำลังเล่น
        if hasattr(self, 'video_update_id'):
            self.after_cancel(self.video_update_id)

        # ปิด video_capture ปัจจุบัน
        if hasattr(self, 'video_capture') and self.video_capture is not None:
            self.video_capture.release()

        # โหลดวิดีโอใหม่
        self.video_capture = cv2.VideoCapture(new_video_path)
        video_name = new_video_path.split("/")[-1].replace(".mp4", "")
        self.controller.mark_video_as_watched(video_name)
        # บันทึกวิดีโอที่ดูแล้ว
        if not self.video_capture.isOpened():
            print(f"ไม่สามารถเปิดไฟล์วิดีโอได้: {new_video_path}")
            return
        
        print(f"เล่นวิดีโอใหม่: {new_video_path}")
        self.update_video()  # เรียกการเล่นวิดีโอใหม่

    def load_video_data(self, button_name):
        """ ฟังก์ชันนี้จะโหลดข้อมูลตามที่ได้รับจากหน้า Learning """
        self.reset_page()

        # ตัวแปรเก็บตำแหน่งปัจจุบันในรายการของ second dropdown
        self.current_index = 0  # เริ่มต้นที่ตัวแรก
        x_position = 110.0  # ตำแหน่ง X ของปุ่ม
        y_position_start = 305.0  # ตำแหน่ง Y เริ่มต้น
        y_spacing = 33.5 # ระยะห่างระหว่างปุ่มในแกน Y

        # แสดงข้อความใหม่ โดยใช้ anchor='center' เพื่อให้ข้อความอยู่กลาง
        #self.text_id = self.canvas.create_text(668.0, 226.0, anchor="center", text=f"บทเรียน {button_name}",
        #                                       fill="#FF7F00", font=("Inter", 48 * -1))
        entry_image_path = f"หมวด_{button_name}.png"  # สมมติว่าชื่อไฟล์รูปภาพขึ้นกับชื่อบทเรียน
        entry_image_change = PhotoImage(file=relative_to_assets(entry_image_path))
        
        if entry_image_path in ["หมวด_สี.png", "หมวด_วัน.png"]:
            y_position = 55
        else:
            y_position = 60

        # แสดงรูปภาพในตำแหน่งที่ต้องการ
        self.entry_id = self.canvas.create_image(1100.0, y_position, anchor="center", image=entry_image_change)
        self.entry_image_change = entry_image_change  # เก็บ reference เพื่อป้องกันรูปหาย

        # เพิ่มรูปภาพใหม่
        self.image_image_4 = PhotoImage(file=relative_to_assets("image_6.png"))
        self.image_id = self.canvas.create_image(
            1090.0, 595.0, image=self.image_image_4)

        # ข้อมูลของ Category และคำที่จะแสดงใน Dropdown ที่สอง
        self.dropdown_data = {
            "วัน": ["วัน", "วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์", "เมื่อวาน", "พรุ่งนี้"],
            "เวลา": ["เวลา", "เช้า", "กลางวัน", "บ่าย", "เย็น", "ค่ำ", "กลางคืน", "เที่ยงคืน", "24ชั่วโมง", "ตลอดทั้งวัน"],
            "เลข": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
            "บุคคล": ["บุคคล", "ฉัน", "คุณ", "เขา", "พวกเรา", "ผู้หญิง", "ผู้ชาย", "เด็ก", "ผู้ใหญ่", "คนแก่"],
            "สี": ["ส้ม", "แดง", "เหลือง", "ฟ้า", "น้ำเงิน", "เขียว", "ขาว", "ดำ", "ทอง", "เทา"]
        }
        self.current_category = button_name
        word_list = self.dropdown_data.get(button_name, [])

        # สร้างปุ่มสำหรับแต่ละคำ
        for index, word in enumerate(word_list[:10]):  # จำกัดจำนวนคำที่ 10 คำ
            lesson_button = Button(self, text=word, font=("Inter", 16,"bold"),
                                   fg="#ff8100", bg="#ffe0d0", borderwidth=0,
                                   highlightthickness=0, relief="flat",anchor="w",padx=10,
                                   command=lambda w=word: self.update_selected_option(w))  # ส่งคำไปยังฟังก์ชัน play_video
            lesson_button.place(x=x_position, y=y_position_start + index * y_spacing, 
                                width=150.0, height=40.0)

        # สร้าง Dropdown แรกสำหรับ Category
        #self.dropdown_Category = ["วัน", "เวลา", "เลข", "บุคคล", "สี"]
        #selected_index = self.dropdown_Category.index(
        #    button_name) if button_name in self.dropdown_Category else 0
        # ตั้งค่าเริ่มต้นตาม index ของ button_name
        # self.selected_Category = StringVar(
        #    value=self.dropdown_Category[selected_index])
        #self.category_menu = OptionMenu(
        #    self, self.selected_Category, *self.dropdown_Category, command=self.update_second_dropdown)
        #self.category_menu.place(x=550.0, y=285.0, width=217.0, height=50.0)

        # สร้าง Dropdown ที่สอง (จะอัพเดตตามการเลือกของ Category)
        # ค่าเริ่มต้นของ Dropdown ที่สอง
        #self.selected_option = StringVar(value="Select an option")
        #self.second_dropdown_menu = OptionMenu(
        #    self, self.selected_option, *self.dropdown_data[self.selected_Category.get()], command=self.load_video_by_option)
        #self.second_dropdown_menu.place(
        #    x=1025.0, y=958.0, width=217.0, height=50.0)

        # เก็บข้อมูลของปุ่มต่างๆ
        self.default_elements = []

        # เพิ่มไฟล์วิดีโอให้กับ VideoCapture
        # ตอนนี้ให้เลือกไฟล์วิดีโอตามที่เลือกจาก Dropdown ที่ 2
        #print(self.selected_option.get())
        #video_option = self.selected_option.get()  # เลือกตัวเลือกจาก Dropdown 2
        if word_list:
            # เลือกคำแรกในหมวดหมู่
            video_option = word_list[self.current_index]
        
            # ตั้งชื่อวิดีโอที่ตรงกับตัวเลือก
            video_path = f"assets/frame0/Video/{video_option}.mp4"
            self.video_capture = cv2.VideoCapture(video_path)
            video_name = video_path.split("/")[-1].replace(".mp4", "")
            self.controller.mark_video_as_watched(video_name)
        
            # ตรวจสอบว่ามีการโหลดวิดีโอสำเร็จ
            if not self.video_capture.isOpened():
                print(f"ไม่สามารถโหลดวิดีโอ: {video_path}")
            else:
                print(f"กำลังเล่นวิดีโอ: {video_option}")

        self.update_video()  # เรียกใช้ฟังก์ชัน update_video เพื่อเริ่มการแสดงผลวิดีโอ
###################################################################################################################################
class ChallengeSelectPage(Frame):
    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        
        self.controller = controller
        
        self.canvas = Canvas(self, bg="#FFFFFF", height=1080, width=1920,
                        bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        self.image_1 = PhotoImage(file=relative_to_assets("image_3.png"))
        self.canvas.create_image(1096.0, 665.0, image=self.image_1)

        self.canvas.create_rectangle(0.0, 110.0, 279.0, 1080.0,
                                fill="#FFE0D0", outline="")
        
        # สร้างปุ่มเริ่มต้น
        self.create_buttons()

############################################################### EXIT ###############################################################
        self.button_image_exit = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_exit = Button(self, image=self.button_image_exit, borderwidth=0, highlightthickness=0,
                             bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit.place(x=126.0, y=1007.0, width=118.0, height=37.0)

        self.button_image_exit2 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        button_exit2 = Button(self, image=self.button_image_exit2, borderwidth=0, highlightthickness=0,
                              bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit2.place(x=33.0, y=1005.0, width=60.0, height=60.0)
####################################################################################################################################
############################################################### Sound ###############################################################
#        self.button_image_Sound = PhotoImage(
#            file=relative_to_assets("button_6.png"))
#        button_Sound = Button(self, image=self.button_image_Sound, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
#                              activebackground="#FFE0D0", command=lambda: print("button_Sound clicked"), relief="flat")
#        button_Sound.place(x=34.0, y=415.0, width=60.0, height=60.0)
#
#        self.button_image_Sound2 = PhotoImage(
#            file=relative_to_assets("button_1.png"))
#        button_Sound2 = Button(self, image=self.button_image_Sound2, borderwidth=0, highlightthickness=0,
#                               bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: print("button_Sound2 clicked"), relief="flat")
#        button_Sound2.place(x=129.0, y=432.0, width=118.0, height=24.0)
#########################################################################################################################################
############################################################### Challenge ###############################################################
        self.button_image_Challenge = PhotoImage(
            file=relative_to_assets("button_10.png"))
        button_Challenge = Button(self, image=self.button_image_Challenge, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                  relief="flat")
        button_Challenge.place(x=34.0, y=325.0, width=60.0, height=60.0)

        self.button_image_Challenge2 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_Challenge2 = Button(self, image=self.button_image_Challenge2, borderwidth=0, highlightthickness=0,
                                   bg="#FFE0D0", activebackground="#FFE0D0",
                                   command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                   relief="flat")
        button_Challenge2.place(x=129.0, y=328.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Learning ###############################################################
        self.button_image_Learning = PhotoImage(
            file=relative_to_assets("button_9.png"))
        button_Learning = Button(self, image=self.button_image_Learning, borderwidth=0, highlightthickness=0,
                         bg="#FFE0D0", activebackground="#FFE0D0", 
                         command=lambda: [controller.show_frame("LearningPage"), controller.frames["LearningPage"].reset_page()],
                         relief="flat")
        button_Learning.place(x=34.0, y=235.0, width=60.0, height=60.0)

        self.button_image_Learning2 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_Learning2 = Button(self, image=self.button_image_Learning2, borderwidth=0, highlightthickness=0,
                          bg="#FFE0D0", activebackground="#FFE0D0", 
                          command=lambda: [controller.show_frame("LearningPage"), controller.frames["LearningPage"].reset_page()],
                          relief="flat")
        button_Learning2.place(x=129.0, y=242.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Home ###############################################################
        self.button_image_Home = PhotoImage(
            file=relative_to_assets("button_12.png"))
        button_Home = Button(self, image=self.button_image_Home, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                             activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home.place(x=34.0, y=150.0, width=60.0, height=60.0)

        self.button_image_Home2 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_Home2 = Button(self, image=self.button_image_Home2, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                              activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home2.place(x=129.0, y=156.0, width=118.0, height=37.0)
###################################################################################################################################

        self.image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
        self.canvas.create_image(950.0, 60.0, image=self.image_image_2)


################################################################ Toggle Button###############################################################

        self.button_image_Toggle = PhotoImage(file=relative_to_assets("button_7.png"))
        button_Toggle = Button(self,image=self.button_image_Toggle,borderwidth=0,highlightthickness=0,bg="#ffbcbc",activebackground="#ffbcbc",command=lambda: print("button_Toggle clicked"),relief="flat")
        button_Toggle.place(x=23.0, y=18.0, width=72.0, height=72.0)

        # สร้าง Entry
        self.entry_image_1 = PhotoImage(file=relative_to_assets("entry_4.png"))
        self.canvas.create_image(190.5, 54.5, image=self.entry_image_1)
###################################################################################################################################
################################################################ Choice Learning ###############################################################
        
# สร้างข้อความ "บทเรียน"
        self.text_id = self.canvas.create_text(
            897.0,
            176.0,
            anchor="nw",
            text="ท้าทาย",
            fill="#FF7F00",
            font=("Inter", 128 * -1)
        )


    def create_buttons(self):
        """ สร้างปุ่มทั้งหมดที่หน้า Challenge """
        self.button_image_12 = PhotoImage(file=relative_to_assets("button_14.png"))
        button_12 = Button(self, image=self.button_image_12, borderwidth=0, bg="#f8dcd6", highlightthickness=0,
                           command=lambda: self.change_to_challenge_page("วัน"), relief="flat")
        button_12.place(x=612.0, y=379.0, width=419.0, height=124.0)

        self.button_image_13 = PhotoImage(file=relative_to_assets("button_15.png"))
        button_13 = Button(self, image=self.button_image_13, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_challenge_page("เวลา"), relief="flat")
        button_13.place(x=1173.0, y=379.0, width=419.0, height=124.0)

        self.button_image_14 = PhotoImage(file=relative_to_assets("button_16.png"))
        button_14 = Button(self, image=self.button_image_14, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_challenge_page("เลข"), relief="flat")
        button_14.place(x=1173.0, y=590.0, width=419.0, height=124.0)

        self.button_image_15 = PhotoImage(file=relative_to_assets("button_17.png"))
        button_15 = Button(self, image=self.button_image_15, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_challenge_page("บุคคล"), relief="flat")
        button_15.place(x=893.0, y=801.0, width=419.0, height=124.0)

        self.button_image_16 = PhotoImage(file=relative_to_assets("button_18.png"))
        button_16 = Button(self, image=self.button_image_16, borderwidth=0, bg="#f9e3dd", highlightthickness=0,
                           command=lambda: self.change_to_challenge_page("สี"), relief="flat")
        button_16.place(x=612.0, y=590.0, width=419.0, height=124.0)
      
    def change_to_challenge_page(self, button_name):
        """ เปลี่ยนหน้าไปยัง ChallengePage และส่งข้อมูล """
        self.controller.show_frame("ChallengePage", button_name)
        
###################################################################################################################################
###################################################################################################################################
class ChallengePage(Frame):
    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        
        self.controller = controller
        self.remaining_time = 5  # เวลาเริ่มต้น
        self.timer_running = False  # ตัวจับเวลายังไม่ทำงาน
        self.time_out_count = 0  # ตัวแปรเก็บจำนวนครั้งที่เวลาหมด
        self.circle_changes = 0  # ตัวแปรสำหรับนับจำนวนการเปลี่ยนสีวงกลม
        self.score_red = 0
        self.score = 5
        self.score_show = 0
        self.score_list1 = 0
        self.score_list2 = 0
        self.circle_colors = []
        # Initialize Mediapipe
        self.mp_hands = mp.solutions.hands
        self.mp_drawing = mp.solutions.drawing_utils
        self.mp_drawing_styles = mp.solutions.drawing_styles

        self.hands = self.mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)
        
        # ข้อมูลของคำในแต่ละหมวดหมู่
        self.word_list1 = {
        "วัน": ["วัน", "วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ"],
        "เวลา": ["เวลา", "เช้า", "กลางวัน", "บ่าย", "เย็น"],
        "เลข": ["1", "2", "3", "4", "5"],
        "บุคคล": ["บุคคล", "ฉัน", "คุณ", "เขา", "พวกเรา"],
        "สี": ["ส้ม", "แดง", "เหลือง", "ฟ้า", "น้ำเงิน"]
        }
        self.word_list2 = {
        "วัน": ["วันพฤหัสบดี", "วันศุกร์", "วันเสาร์", "เมื่อวาน", "พรุ่งนี้"],
        "เวลา": ["ค่ำ", "กลางคืน", "เที่ยงคืน", "24ชั่วโมง", "ตลอดทั้งวัน"],
        "เลข": ["6", "7", "8", "9", "10"],
        "บุคคล": ["ผู้หญิง", "ผู้ชาย", "เด็ก", "ผู้ใหญ่", "คนแก่"],
        "สี": ["เขียว", "ขาว", "ดำ", "ทอง", "เทา"]
        }
        self.word_list = self.word_list1
        self.current_category = "เลข"  # หมวดหมู่ที่ใช้งานปัจจุบัน
        self.update_labels()  # เรียกฟังก์ชันอัปเดต
        
        # Labels for model predictions
        self.labels_dict = {0: '1', 1: '2', 2: '3', 3: '4', 4: '5'}

        # Canvas for other elements
        self.canvas = Canvas(self, bg="#FFFFFF", height=1080, width=1920,
                             bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        
        self.label_img = Label(self)  # กำหนด label สำหรับแสดงภาพ
        # Use `place()` to set the exact position of the camera feed
        self.label_img.place(x=645, y=365)  # Example position, adjust as necessary
        
        self.image_1 = PhotoImage(file=relative_to_assets("image_12.png"))
        self.canvas.create_image(1096.0, 595.0, image=self.image_1)
        # สร้างภาพพื้นหลังก่อน (image_5)
        self.image_image_5 = PhotoImage(file=relative_to_assets("image_10.png"))
        self.background_image = self.canvas.create_image(1000.0, 595.0, image=self.image_image_5)
        self.image_image_11 = PhotoImage(file=relative_to_assets("image_11.png"))
        self.background_image2 = self.canvas.create_image(1810.0, 595.0, image=self.image_image_11)
         # สร้างวงกลม (แทนที่ create_rounded_rectangle ด้วย create_oval)
        self.circle_items = []
        self.circle_items.append(self.canvas.create_oval(1600, 380, 1640, 420, fill="#D9D9D9", outline=""))
        self.circle_items.append(self.canvas.create_oval(1600, 480, 1640, 520, fill="#D9D9D9", outline=""))
        self.circle_items.append(self.canvas.create_oval(1600, 580, 1640, 620, fill="#D9D9D9", outline=""))
        self.circle_items.append(self.canvas.create_oval(1600, 680, 1640, 720, fill="#D9D9D9", outline=""))
        self.circle_items.append(self.canvas.create_oval(1600, 780, 1640, 820, fill="#D9D9D9", outline=""))
        self.background_rect = self.canvas.create_rectangle(410,155,1575,1037,fill="#ffffff", outline="")
        
        self.cap = None
        self.open_camera()
        
        # Reset circle colors to white
        self.reset_circle_colors()
        
        self.canvas.create_rectangle(0.0, 110.0, 279.0, 1080.0,
                                fill="#FFE0D0", outline="")

############################################################### EXIT ###############################################################
        self.button_image_exit = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_exit = Button(self, image=self.button_image_exit, borderwidth=0, highlightthickness=0,
                             bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit.place(x=126.0, y=1007.0, width=118.0, height=37.0)

        self.button_image_exit2 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        button_exit2 = Button(self, image=self.button_image_exit2, borderwidth=0, highlightthickness=0,
                              bg="#FFE0D0", activebackground="#FFE0D0", relief="flat", command=exit_program)
        button_exit2.place(x=33.0, y=1005.0, width=60.0, height=60.0)
####################################################################################################################################
############################################################### Sound ###############################################################
#        self.button_image_Sound = PhotoImage(
#            file=relative_to_assets("button_6.png"))
#        button_Sound = Button(self, image=self.button_image_Sound, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
#                              activebackground="#FFE0D0", command=lambda: print("button_Sound clicked"), relief="flat")
#        button_Sound.place(x=34.0, y=415.0, width=60.0, height=60.0)
#
#        self.button_image_Sound2 = PhotoImage(
#            file=relative_to_assets("button_1.png"))
#        button_Sound2 = Button(self, image=self.button_image_Sound2, borderwidth=0, highlightthickness=0,
#                               bg="#FFE0D0", activebackground="#FFE0D0", command=lambda: print("button_Sound2 clicked"), relief="flat")
#        button_Sound2.place(x=129.0, y=432.0, width=118.0, height=24.0)
#########################################################################################################################################
############################################################### Challenge ###############################################################
        self.button_image_Challenge = PhotoImage(
            file=relative_to_assets("button_10.png"))
        button_Challenge = Button(self, image=self.button_image_Challenge, borderwidth=0, highlightthickness=0,
                                  bg="#FFE0D0", activebackground="#FFE0D0",
                                  command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                  relief="flat")
        button_Challenge.place(x=34.0, y=325.0, width=60.0, height=60.0)

        self.button_image_Challenge2 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_Challenge2 = Button(self, image=self.button_image_Challenge2, borderwidth=0, highlightthickness=0,
                                   bg="#FFE0D0", activebackground="#FFE0D0",
                                   command=lambda: [controller.show_frame("ChallengeSelectPage"), controller.frames["ChallengeSelectPage"]],
                                   relief="flat")
        button_Challenge2.place(x=129.0, y=325.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Learning ###############################################################
        self.button_image_Learning = PhotoImage(
            file=relative_to_assets("button_9.png"))
        button_Learning = Button(self, image=self.button_image_Learning, borderwidth=0, highlightthickness=0,
                         bg="#FFE0D0", activebackground="#FFE0D0", 
                         command=lambda: [controller.show_frame("LearningPage"), controller.frames["LearningPage"].reset_page()],
                         relief="flat")
        button_Learning.place(x=34.0, y=235.0, width=60.0, height=60.0)

        self.button_image_Learning2 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_Learning2 = Button(self, image=self.button_image_Learning2, borderwidth=0, highlightthickness=0,
                          bg="#FFE0D0", activebackground="#FFE0D0", 
                          command=lambda: [controller.show_frame("LearningPage"), controller.frames["LearningPage"].reset_page()],
                          relief="flat")
        button_Learning2.place(x=129.0, y=242.0, width=118.0, height=37.0)
###################################################################################################################################
############################################################### Home ###############################################################
        self.button_image_Home = PhotoImage(
            file=relative_to_assets("button_12.png"))
        button_Home = Button(self, image=self.button_image_Home, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                             activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home.place(x=34.0, y=150.0, width=60.0, height=60.0)

        self.button_image_Home2 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_Home2 = Button(self, image=self.button_image_Home2, borderwidth=0, highlightthickness=0, bg="#FFE0D0",
                              activebackground="#FFE0D0", command=lambda: controller.show_frame("StartPage"), relief="flat")
        button_Home2.place(x=129.0, y=156.0, width=118.0, height=37.0)
###################################################################################################################################

        self.image_image_2 = PhotoImage(file=relative_to_assets("image_13.png"))
        self.canvas.create_image(950.0, 60.0, image=self.image_image_2)


################################################################ Toggle Button###############################################################

        self.button_image_Toggle = PhotoImage(file=relative_to_assets("button_7.png"))
        button_Toggle = Button(self,image=self.button_image_Toggle,borderwidth=0,highlightthickness=0,bg="#ffbcbc",activebackground="#ffbcbc",command=lambda: print("button_Toggle clicked"),relief="flat")
        button_Toggle.place(x=23.0, y=18.0, width=72.0, height=72.0)

        # สร้าง Entry
        self.entry_image_1 = PhotoImage(file=relative_to_assets("entry_4.png"))
        self.canvas.create_image(190.5, 54.5, image=self.entry_image_1)
        
###################################################################################################################################
################################################################ Choice Learning ###############################################################
        self.do_image = PhotoImage(file=relative_to_assets("image_14.png"))
        self.canvas.create_image(1550.5, 55.5, image=self.do_image)

        self.timer_text = self.canvas.create_text(
            1590.0,
            244.0,
            anchor="nw",
            text="15",
            fill="#FF7F00",
            font=("Inter", 72 * -1)
        )
        self.timer_unit = self.canvas.create_text(
            1770.0,
            250.0,
            anchor="nw",
            text="วินาที",
            fill="#FF7F00",
            font=("Inter", 40 * -1)
        )
        self.word_text = self.canvas.create_text(
            1220.0,
            57.0,
            anchor="center",
            text="คำ",  # ข้อความเริ่มต้น
            fill="#FF4D00",
            font=("Inter", 72 * -1,"bold")
        )
        self.point_text = self.canvas.create_text(
            1762.0,
            375.0,
            anchor="nw",
            text="คะแนน",
            fill="#FF7F00",
            font=("Inter", 32 * -1,"bold")
        )
        self.score_text = self.canvas.create_text(
            1790.0,
            475.0,
            anchor="nw",
            text="10",
            fill="#FF7F00",
            font=("Inter", 72 * -1)
        )
        
        self.button_21_image = PhotoImage(file=relative_to_assets("button_21.png"))
        self.button_21 = Button(self, image=self.button_21_image, borderwidth=0, highlightthickness=0, bg="#ffffff",
                        activebackground="#ffffff", command=self.on_button_21_click, relief="flat")
        self.button_21.place(x=1747.0, y=840.0, width=125.0, height=125.0)

        self.button_22_image = PhotoImage(file=relative_to_assets("button_22.png"))
        self.button_22 = Button(self, image=self.button_22_image, borderwidth=0, highlightthickness=0, bg="#ffffff",
                        activebackground="#ffffff", command=self.on_button_22_click, relief="flat")
        self.button_22.place(x=1747.0, y=660.0, width=125.0, height=125.0)
        
        self.selected_category = None  # เริ่มต้นให้ไม่มีการเลือกหมวดหมู่
        # เริ่มตัวจับเวลา
        self.start_timer()
        
    def update_labels(self):
        """อัปเดต label_dict ตามหมวดหมู่ที่กำหนด"""
        category_words = self.word_list.get(self.current_category, [])
        self.labels_dict = {i: word for i, word in enumerate(category_words)}
        # ฟังก์ชันที่ใช้ในการจัดการการคลิกปุ่ม
    def on_button_21_click(self):
        """ รีเซ็ตหน้าจอเมื่อกดปุ่ม 21 """
        print("Button 21 clicked")
        self.change_circle_color_to_white()  # รีเซ็ตสีวงกลมเป็นสีขาว
        self.reset_timer()

    def on_button_22_click(self):
        """เปลี่ยนไปใช้คำจาก word_list2 และรีเซ็ตเวลา"""
        print("Button 22 clicked")

        # เปลี่ยนไปใช้หมวดหมู่คำที่ตรงข้าม
        if self.word_list == self.word_list1:
            # ถ้าตอนนี้ใช้ word_list1 ก็เปลี่ยนไปเป็น word_list2
            self.word_list = self.word_list2
        elif self.word_list == self.word_list2:
            # ถ้าตอนนี้ใช้ word_list2 ให้เปลี่ยนไปเป็น word_list1
            self.word_list = self.word_list1
            
        self.load_model_for_category(self.selected_category)
        self.change_circle_color_to_white()  # รีเซ็ตสีวงกลมเป็นสีขาว
        self.reset_timer()  # รีเซ็ตเวลาและวงกลม
        self.update_labels()  # อัปเดตคำที่แสดง
        
    def reset_circle_colors(self):
        """ ฟังก์ชันเพื่อตั้งค่าสีของวงกลมเป็นสีขาว """
        for circle in self.circle_items:
            self.canvas.itemconfig(circle, fill="#D9D9D9")  # เปลี่ยนสีของวงกลมเป็นขาว
        self.time_out_count = 0  # Reset the timeout counter to start from the first circle

        
    def start_timer(self):
        """ เริ่มตัวจับเวลา """
        self.stop_timer()  # หยุดตัวจับเวลาเก่าหากมี
        self.timer_running = True
        self.remaining_time = 5  # รีเซ็ตเวลาเริ่มต้น
        self.update_timer()

    def stop_timer(self):
        """ หยุดตัวจับเวลา """
        self.timer_running = False
        if hasattr(self, "after_id") and self.after_id:
            self.after_cancel(self.after_id)  # หยุดการเรียก timer
            self.after_id = None
    def stop_game(self):
        """ ฟังก์ชันเพื่อหยุดเกมเมื่อครบ 5 ครั้ง """
        self.timer_running = False  # หยุดนาฬิกา
        # ตรวจว่าตอบครบ 5 ครั้งแล้วหรือยัง
        if self.time_out_count == 5:
            if self.word_list == self.word_list1:
                # อัปเดตคะแนนสูงสุดของ wordlist1
                self.score = self.circle_colors.count("green")
                circle_colors_length = len(self.circle_colors)
                print(f"จำนวนข้อมูลใน circle_colors: {circle_colors_length}")
                self.score_list1 = max(self.score_list1, self.score)
                print(f"คะแนนสูงสุดของ wordlist1: {self.score_list1}")
            elif self.word_list == self.word_list2:
                # อัปเดตคะแนนสูงสุดของ wordlist2
                self.score = self.circle_colors.count("green")
                circle_colors_length = len(self.circle_colors)
                print(f"จำนวนข้อมูลใน circle_colors: {circle_colors_length}")
                self.score_list2 = max(self.score_list2, self.score)
                print(f"คะแนนสูงสุดของ wordlist2: {self.score_list2}")

            # ส่งคะแนนไปยัง StartPage
            self.controller.update_start_page_score(self.selected_category, self.score_list1, self.score_list2)
        print("เกมจบแล้ว!")
        # คุณสามารถทำการปิดหน้าต่างหรือการจัดการอื่นๆ เมื่อเกมจบได้

    def update_timer(self): 
        """ อัปเดตเวลาถอยหลัง """
        if self.timer_running and self.remaining_time > 0:
            self.canvas.itemconfig(self.timer_text, text=str(self.remaining_time))  # อัปเดตข้อความบน canvas

            # ปรับตำแหน่งของเวลาให้เหมาะสมตามจำนวนหลัก
            if self.remaining_time < 10:  # ถ้ามีเลขหลักเดียว
                self.canvas.coords(self.timer_text, 1790.0, 175.0)
            else:  # ถ้ามีเลขสองหลัก
                self.canvas.coords(self.timer_text, 1765.0, 175.0)

            self.remaining_time -= 1  # ลดเวลาลง 1 วินาที
            self.after_id = self.after(1000, self.update_timer)  # เรียกฟังก์ชัน update_timer ทุก 1 วินาที
        elif self.remaining_time <= 0:  # เมื่อหมดเวลา
            print("หมดเวลา")
            self.change_circle_color_to_red()  # เปลี่ยนสีวงกลม
            self.circle_changes += 1  # เพิ่มจำนวนการเปลี่ยนสีวงกลม

            if self.circle_changes >= 5:
                self.timer_running = False  # หยุดนับเวลาเมื่อเปลี่ยนสีครบ 5 ครั้ง
                print("หยุดนับเวลา")
                self.stop_game()  # หยุดเกม
            else:
                self.update_word_text()  # อัปเดตคำ
                self.start_timer()  # เริ่มจับเวลาใหม่
            
    def update_word_text(self):
        """ อัปเดตคำที่แสดงบน canvas จากการสุ่มในหมวดหมู่ที่เลือก """
        self.canvas.itemconfig(self.score_text, text=str(self.score_show))
        if self.selected_category is not None:  # เช็คว่าเลือกหมวดหมู่แล้ว
            word = random.choice(self.word_list[self.selected_category])  # เลือกคำจากหมวดหมู่ที่เลือก
            self.current_word = word
            self.canvas.itemconfig(self.word_text, text=word)  # อัปเดตคำที่แสดงบน canvas
        else:
            print("กรุณาเลือกหมวดหมู่ก่อน")

            
    def reset_timer(self):
        """ รีเซ็ตเวลาทั้งหมด """
        self.remaining_time = 5  # กำหนดเวลาเริ่มต้นใหม่
        self.time_out_count = 0  # ตัวแปรเก็บจำนวนครั้งที่เวลาหมด
        self.score = 5
        self.score_show = 0
        self.score_red = 0
        self.circle_colors = []
        self.timer_running = False
        self.circle_changes = 0  # รีเซ็ตจำนวนการเปลี่ยนสีวงกลม
        self.update_word_text()  # รีเฟรชคำที่แสดง
        self.start_timer()  # เริ่มจับเวลาใหม่
        
    def reset_content(self):
        self.remaining_time = 5  # กำหนดเวลาเริ่มต้นใหม่
        self.timer_running = False
        self.update_word_text()  # รีเฟรชคำที่แสดง
        self.start_timer()  # เริ่มจับเวลาใหม่
        
    def open_camera(self):
        """ ฟังก์ชันเปิดกล้อง """
        self.cap = cv2.VideoCapture(0)  # เปิดกล้องตัวที่ 0
        if not self.cap.isOpened():
            print("ไม่สามารถเปิดกล้องได้")
        else:
            print("กล้องเปิดใช้งานสำเร็จ")
        
        self.camera_image = None
        self.camera_label = self.canvas.create_image(1000, 630)  # กำหนดตำแหน่งกล้อง
        self.update_frame()

        # ยกกล้องให้ทับภาพพื้นหลัง
        self.raise_camera()
        
    def raise_camera(self):
        """ ฟังก์ชันยกกล้องขึ้นมาแสดงบนสุด """
        if self.camera_label:
            self.canvas.tag_raise(self.camera_label)  # ยกกล้องให้มาอยู่ด้านบนสุด

    def close_camera(self):
        """ ฟังก์ชันปิดกล้องเมื่อไม่ใช้งาน """
        if self.cap and self.cap.isOpened():
            self.cap.release()
            self.cap = None
            print("กล้องถูกปิด")
            
    # ฟังก์ชันโหลดโมเดลตามหมวดหมู่
    def load_model_for_category(self, category_name):
        if self.word_list == self.word_list1:
            if category_name == "วัน":
                model_path = "assets/frame0/Model/Day1.h5"
            elif category_name == "เวลา":
                model_path = "assets/frame0/Model/Time1.h5"
            elif category_name == "เลข":
                model_path = "assets/frame0/Model/Num1.h5"
            elif category_name == "บุคคล":
                model_path = "assets/frame0/Model/Person1.h5"
            elif category_name == "สี":
                model_path = "assets/frame0/Model/Color1.h5"
            else:
                print("None")
                model_path = None  # ถ้าไม่พบหมวดหมู่ที่ตรง
        elif self.word_list == self.word_list2:
            if category_name == "วัน":
                model_path = "assets/frame0/Model/Day2.h5"
            elif category_name == "เวลา":
                model_path = "assets/frame0/Model/Time2.h5"
            elif category_name == "เลข":
                model_path = "assets/frame0/Model/Num2.h5"
            elif category_name == "บุคคล":
                model_path = "assets/frame0/Model/Person2.h5"
            elif category_name == "สี":
                model_path = "assets/frame0/Model/Color2.h5"
            else:
                print("None")
                model_path = None  # ถ้าไม่พบหมวดหมู่ที่ตรง
        else:
            print("ไม่พบ word_list ที่รองรับ")
            return
        print(model_path)
        self.model = load_model(model_path)
        

    def update_frame(self):
        global countdown_id

        data_aux = []
        x_ = []
        y_ = []

        if self.cap is not None:
            ret, frame = self.cap.read()
            if not ret:
                print("ไม่สามารถจับภาพจากกล้องได้.")
        else:
            print("กล้องไม่ถูกเริ่มต้น.")
        if ret:
            H, W, _ = frame.shape
            
            # ปรับขนาดภาพให้ใหญ่ขึ้น 10% (จากขนาดเดิม)
            new_size = (int(W * 1.75), int(H * 1.75))  # ขนาดใหม่ที่เพิ่มขึ้น 10%
            frame = cv2.resize(frame, new_size)

            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            results = self.hands.process(frame_rgb)

            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    self.mp_drawing.draw_landmarks(
                        frame,  # ภาพที่จะแสดง
                        hand_landmarks,  # ผลลัพธ์จากโมเดล
                        self.mp_hands.HAND_CONNECTIONS,  # การเชื่อมต่อระหว่างจุด
                        self.mp_drawing_styles.get_default_hand_landmarks_style(),
                        self.mp_drawing_styles.get_default_hand_connections_style())

                for hand_landmarks in results.multi_hand_landmarks:
                    for i in range(len(hand_landmarks.landmark)):
                        x = hand_landmarks.landmark[i].x
                        y = hand_landmarks.landmark[i].y

                        x_.append(x)
                        y_.append(y)

                    for i in range(len(hand_landmarks.landmark)):
                        x = hand_landmarks.landmark[i].x
                        y = hand_landmarks.landmark[i].y
                        data_aux.append(x - min(x_))
                        data_aux.append(y - min(y_))

                # การทำนาย
                data_aux = np.expand_dims(np.array(data_aux), axis=0)  # เพิ่มมิติของข้อมูล
                prediction = self.model.predict(data_aux)
                predicted_class = np.argmax(prediction, axis=1)[0]  # เลือกค่าที่ทำนายสูงสุด

                predicted_character = self.labels_dict.get(predicted_class, 'Unknown')

                x1 = int(min(x_) * new_size[0]) - 10
                y1 = int(min(y_) * new_size[1]) - 10
                x2 = int(max(x_) * new_size[0]) + 10
                y2 = int(max(y_) * new_size[1]) + 10


                # วาดกรอบและแสดงข้อความที่ทำนาย
                cv2.rectangle(frame_rgb, (x1, y1), (x2, y2), (0, 0, 0), 4)
                frame_rgb = self.draw_thai_text(frame_rgb, predicted_character, (x1, y1 - 10), font_path="assets/frame0/Sriracha-Regular.ttf", font_size=32, color=(0, 0, 0))

                self.check_answer(predicted_character)
                
            img = Image.fromarray(frame_rgb)
            imgtk = ImageTk.PhotoImage(image=img)
            self.label_img.imgtk = imgtk
            self.label_img.configure(image=imgtk)
            self.label_img.place(x=430,y=175)
        else:
            img = Image.new('RGB', (105, 125), color='black')
            imgtk = ImageTk.PhotoImage(image=img)
            self.label_img.imgtk = imgtk
            self.label_img.configure(image=imgtk)
            self.label_img.place(x=350,y=180)

        # ตั้งค่าการแสดงผลให้เหมือนเดิม (มีการจัดตำแหน่งกลางและมี Padding)
        self.label_img.after(10, self.update_frame)
        
    def draw_thai_text(self, image, text, position, font_path, font_size=64, color=(0, 0, 0)):
        pil_image = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(pil_image)
        font = ImageFont.truetype(font_path, font_size)
        draw.text(position, text, font=font, fill=color)
        return cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
        
    def check_answer(self, predicted_character):
        # ตรวจสอบว่าคำที่ทำนายตรงกับคำที่แสดงบนหน้าจอหรือไม่
        if predicted_character == self.current_word:
            print("คำทำนายถูกต้อง!")
            self.change_circle_color_to_green()  # เปลี่ยนวงกลมเป็นสีเขียวเมื่อคำทำนายถูกต้อง
            # อัปเดตคำใหม่
            self.update_word_text()
        
            # รีเซ็ตเวลา
            self.reset_content()
        else:
            print("คำทำนายไม่ถูกต้อง")
        
        
    def on_show(self):
        """ เรียกใช้เมื่อแสดงหน้าปัจจุบัน """
        self.word_list = self.word_list1
        self.reset_circle_colors()  # รีเซ็ตสีวงกลมก่อนการแสดงหน้าใหม่
        self.open_camera()  # เปิดกล้องเมื่อแสดงหน้าปัจจุบัน
        self.start_timer()

    def on_hide(self):
        """ เรียกใช้เมื่อซ่อนหน้า """
        self.stop_timer()
        self.score = 0
        self.score_show = 0
        self.circle_colors = []
        self.close_camera()  # ปิดกล้องเมื่อซ่อนหน้า
        print("กล้องถูกปิด")
        
    def raise_camera(self):
        """ ฟังก์ชันยกกล้องขึ้นมาแสดงบนสุด """
        if self.camera_label:
            self.canvas.tag_raise(self.camera_label)  # ยกกล้องให้มาอยู่ด้านบนสุด

    def blink_rectangle(self, color, duration=1000):
        # เปลี่ยนสีของสี่เหลี่ยม
        self.canvas.itemconfig(self.background_rect, fill=color)
        # ตั้งเวลาให้กลับไปเป็นสีเดิม
        self.after(duration, lambda: self.canvas.itemconfig(self.background_rect, fill="#FFFFFF"))


    def change_circle_color_to_red(self):
        """ ฟังก์ชันเพื่อเปลี่ยนสีของวงกลมทีละวงเมื่อเวลาหมด """
        if self.time_out_count < len(self.circle_items):  # ตรวจสอบว่าเวลาหมดไปแล้วกี่ครั้ง
            print(f"เปลี่ยนสีวงกลมที่ {self.time_out_count + 1}")
            # เปลี่ยนสีของวงกลมตามลำดับที่เวลาหมด
            self.canvas.itemconfig(self.circle_items[self.time_out_count], fill="#FF7F00")
            
            self.circle_colors.append("red")
            self.controller.time_up()
            self.time_out_count += 1  # เพิ่มจำนวนครั้งที่เวลาหมด

            self.blink_rectangle("#FF0000")
        else:
            print("ไม่มีวงกลมเพิ่มเติมให้เปลี่ยนสี")  # กรณีที่เวลาหมดจนถึงวงกลมทั้งหมด
            
            
    def change_circle_color_to_green(self):
        """ ฟังก์ชันเพื่อเปลี่ยนสีของวงกลมเป็นสีเขียวเมื่อคำถูกต้อง """
        if self.circle_changes >= 5:
                self.timer_running = False  # หยุดนับเวลาเมื่อเปลี่ยนสีครบ 5 ครั้ง
                print("หยุดนับเวลา")
                self.stop_game()  # หยุดเกม
        if self.time_out_count < len(self.circle_items):  # ตรวจสอบว่าเวลาหมดไปแล้วกี่ครั้ง
            print(f"เปลี่ยนสีวงกลมที่ {self.time_out_count + 1} เป็นสีเขียว")
        
            # เปลี่ยนสีของวงกลมที่เวลาหมดไปแล้วเป็นสีเขียว
            self.canvas.itemconfig(self.circle_items[self.time_out_count], fill="#FF7F00")
            self.circle_colors.append("green")
            self.controller.correct_answer()
            
            self.circle_changes += 1
            self.time_out_count += 1  # เพิ่มจำนวนครั้งที่เวลาหมด
            self.score_show += 1

            self.blink_rectangle("#00FF00")
        else:
            print("ไม่มีวงกลมเพิ่มเติมให้เปลี่ยนสี")  # กรณีที่เวลาหมดจนถึงวงกลมทั้งหมด
        
            
    def change_circle_color_to_white(self):
        """ เปลี่ยนสีวงกลมเป็นสีขาว """
        for circle in self.circle_items:  # วนลูปผ่านทุกวงกลมใน self.circle_items
            self.canvas.itemconfig(circle, fill="#D9D9D9")  # เปลี่ยนสีของแต่ละวงกลมเป็นสีขาว

        
    def update_content(self, category_name):
        """อัปเดตชื่อหมวดและคำตามข้อมูลที่ได้รับ"""
        # ล็อกหมวดหมู่ที่เลือก
        self.selected_category = category_name  # ล็อกหมวดหมู่ที่ส่งเข้ามา
        self.current_category = category_name  # อัปเดต self.current_category ให้ตรงกับ category_name

        entry_image_path = f"หมวด_{category_name}.png"  # สมมติว่าชื่อไฟล์รูปภาพขึ้นกับชื่อบทเรียน
        entry_image_change = PhotoImage(file=relative_to_assets(entry_image_path))
        
        if entry_image_path in ["หมวด_สี.png", "หมวด_วัน.png"]:
            y_position = 55
        else:
            y_position = 60

        # แสดงรูปภาพในตำแหน่งที่ต้องการ
        self.entry_id = self.canvas.create_image(800.0, y_position, anchor="center", image=entry_image_change)
        self.entry_image_change = entry_image_change  # เก็บ reference เพื่อป้องกันรูปหาย

        # โหลดโมเดลใหม่ตามหมวดหมู่
        self.load_model_for_category(category_name)

        # อัปเดต label และคำที่แสดง
        self.update_labels()
        self.update_word_text()
    
        
###################################################################################################################################

if __name__ == "__main__":
    app = App()
    app.mainloop()
